version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 14388c95-0dcb-4c92-9752-8c8d76205775" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - run:
          name: Handle front-end build failure
          when: on_fail
          command: |
            echo "Front end failed to build"
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: Handle back-end build failure
          when: on_fail
          command: |
            echo "Back-end failed to build"
            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm run test
      - run:
          name: Handle frontend test failure
          when: on_fail
          command: |
            echo "Frontend tests failed"
            exit 1
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Test backend
          command: |
            cd backend
            npm run test
      - run:
          name: Handle back-end test failure
          when: on_fail
          command: |
            echo "Backend tests failed"
            exit 1
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
      - run:
          name: Handle frontend scan failure
          when: on_fail
          command: |
            echo "Frontend scan failed"
            exit 1
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit --audit-level=critical
      - run:
          name: Handle back-end scan failure
          when: on_fail
          command: |
            echo "Backend scan failed"
            exit 1
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies required for workspace capability
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:d6:ad:43:a5:d7:83:7a:e8:05:73:91:c8:95:2d:05"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations >> ~/migration-output.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully" ~/migration-output.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 14388c95-0dcb-4c92-9752-8c8d76205775" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies required for workspace capability
          command: |
            yum install -y tar
            yum install -y gzip
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            node -v
            npm -v
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | grep -E -o -m 1 "^[0-9.]+")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "the API_URL is ${API_URL}"
            cd frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            aws s3 sync ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --delete
      # Here's where you will add some code to rollback on failure
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:d6:ad:43:a5:d7:83:7a:e8:05:73:91:c8:95:2d:05"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm
            apk add --update rsync
            apk add --update openssh
            cd backend
            npm i
            npm run build
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            # your code here
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  smoke-test:
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    docker:
      - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies required for workspace capability
          command: |
            apk add --update curl
            apk add --update nodejs npm
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(cat .circleci/ansible/inventory.txt | grep -E -o -m 1 "^[0-9.]+")
            echo 'export BACKEND_IP='"$BACKEND_IP" >> $BASH_ENV
      - run:
          name: Backend smoke test.
          command: |
            if curl -s "http://${BACKEND_IP}:3030/api/status" | grep "\"status\":\"ok\""
            then
              echo "Backend smoke test passed!"
              return 0
            else
              echo "Backend smoke test failed!"
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend smoke test succeeded!"
              return 0
            else
              echo "Frontend smoke test failed!"
              return 1
            fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Workflow Id is: "${OldWorkflowID}"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udacity-project-stack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              echo "Cleaning up old stacks and files!"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  cleanup:
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    docker:
      - image: python:3.7-alpine3.11
      # Lightweight Docker image
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update nodejs npm
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo 'export OldWorkflowID='"$OldWorkflowID" >> $BASH_ENV
            echo 'export STACKS='"$STACKS" >> $BASH_ENV
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              echo "Cleaning up old stacks and files!"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
